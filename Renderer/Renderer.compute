#pragma kernel March
#include "MarchingTable.hlsl"

struct Triangle {
    float3 a, b, c;
    int chunk;
};

StructuredBuffer<int3> positions;
StructuredBuffer<int> positionsUsed;
StructuredBuffer<float> Densities;
AppendStructuredBuffer<Triangle> Result;

int width;
int height;

float3 interp(float3 edgeVertex1, float valueAtVertex1, float3 edgeVertex2, float valueAtVertex2)
{
    return (edgeVertex1 + (0.5 - valueAtVertex1) * (edgeVertex2 - edgeVertex1)  / (valueAtVertex2 - valueAtVertex1));
}

uint idToIndex(uint3 id, uint group_id){
    return group_id * 512 + (id.x + 8 * (id.y + 8 * id.z));
}

float getDensity(int x, int y, int z, uint group_id){
    int3 group = positions[positionsUsed[group_id]];

    if(x < 0){
        x = 7;
        group.x -= 1;
    }

    if(x > 7){
        x = 0;
        group.x += 1;
    }

    if(y < 0){
        y = 7;
        group.y -= 1;
    }

    if(y > 7){
        y = 0;
        group.y += 1;
    }

    if(z < 0){
        z = 7;
        group.z -= 1;
    }

    if(z > 7){
        z = 0;
        group.z += 1;
    }

    uint groupPosition = (group.x + width * (group.y + height * group.z));
    uint blockPosition = x + 8 * (y + 8 * z);

    return Densities[groupPosition * 512 + blockPosition];
}

[numthreads(8,8,8)]
void March (uint3 id: SV_GroupThreadID, uint3 group_id: SV_GroupID)
{
    float cubeValues[8] = {
       getDensity(id.x, id.y, id.z + 1, group_id.x),
       getDensity(id.x + 1, id.y, id.z + 1, group_id.x),
       getDensity(id.x + 1, id.y, id.z, group_id.x),
       getDensity(id.x, id.y, id.z, group_id.x),
       getDensity(id.x, id.y + 1, id.z + 1, group_id.x),
       getDensity(id.x + 1, id.y + 1, id.z + 1, group_id.x),
       getDensity(id.x + 1, id.y + 1, id.z, group_id.x),
       getDensity(id.x, id.y + 1, id.z, group_id.x)
    };

    int cubeIndex = 0;
    if (cubeValues[0] < 0.5) cubeIndex |= 1;
    if (cubeValues[1] < 0.5) cubeIndex |= 2;
    if (cubeValues[2] < 0.5) cubeIndex |= 4;
    if (cubeValues[3] < 0.5) cubeIndex |= 8;
    if (cubeValues[4] < 0.5) cubeIndex |= 16;
    if (cubeValues[5] < 0.5) cubeIndex |= 32;
    if (cubeValues[6] < 0.5) cubeIndex |= 64;
    if (cubeValues[7] < 0.5) cubeIndex |= 128;

    int edges[] = triTable[cubeIndex];
    for (int i = 0; edges[i] != -1; i += 3)
    {
        int e00 = edgeConnections[edges[i]][0];
        int e01 = edgeConnections[edges[i]][1];

        int e10 = edgeConnections[edges[i + 1]][0];
        int e11 = edgeConnections[edges[i + 1]][1];
        
        int e20 = edgeConnections[edges[i + 2]][0];
        int e21 = edgeConnections[edges[i + 2]][1];

        Triangle tri;
        tri.a = interp(cornerOffsets[e00], cubeValues[e00], cornerOffsets[e01], cubeValues[e01]) + id;
        tri.b = interp(cornerOffsets[e10], cubeValues[e10], cornerOffsets[e11], cubeValues[e11]) + id;
        tri.c = interp(cornerOffsets[e20], cubeValues[e20], cornerOffsets[e21], cubeValues[e21]) + id;
        tri.chunk = group_id.x;

        Result.Append(tri);
    }
}